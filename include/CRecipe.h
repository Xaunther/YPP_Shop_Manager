#pragma once

#include "AKeyable.h"
#include "IDescriptable.h"
#include "IJsonable.h"

#include "CKeyItem.h"

#include "traits/CRecipe.h"
#include "types/CRecipe.h"

namespace ypp_sm
{

/**
 * @brief Class for a recipe.
 */
class CRecipe : public IJsonable, public IDescriptable, public AKeyable, protected json_traits<CRecipe>, protected default_traits<CRecipe>
{
protected:
	using items = types::CRecipe::items;
	using count = types::CRecipe::count;

public:
	/**
	 * @brief Member constructor.
	 * @param aName Name of the recipe.
	 * @param aItems \copybrief mItems
	 * @param aYield \copybrief mYield
	 */
	explicit CRecipe( std::string_view aName, const items& aItems = {}, count aYield = DEFAULT_YIELD );

	/**
	 * @brief JSON constructor.
	 * @param aJSON JSON object
	 * @param aName Name of the item.
	 */
	explicit CRecipe( const json& aJSON, std::string_view aName );

protected:
	/**
	 * @copydoc IJsonable::ToJSON
	 */
	void JSON( json& aJSON ) const noexcept override;

private:
	/**
	 * @copydoc IJsonable::ToJSON
	 */
	std::string Description( unsigned int aIndentDepth, char aIndentChar ) const noexcept override;

public:
	//! Retrieves the \copybrief mItems
	const items& GetItems() const noexcept;

	//! Retrieves the \copybrief mYield
	count GetYield() const noexcept;

	//! Retrieves the \copybrief mDoubloonCount
	count GetDoubloonCount() const noexcept;
private:
	//! Items needed for the recipe.
	items mItems;
	//! Doubloon cost for the recipe.
	count mDoubloonCount;
	//! Items generated by the recipe.
	count mYield;
};

} // ypp_sm namespace
